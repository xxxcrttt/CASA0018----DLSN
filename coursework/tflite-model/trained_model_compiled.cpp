/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 21.03.2022 17:56:37

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 2544;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0408470518887043, } };
const TfArray<1, int> quant0_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 25, 16, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[16*1*3*13] = { 
  /* [0][0][][] */ -95,-66,68,-3,100,117,-37,-81,-56,-34,73,114,-9, -41,33,-97,-72,102,-30,-4,5,-96,-26,15,28,-42, 17,-20,-24,-20,-46,57,11,-104,-127,-45,41,73,-57, 
  /* [1][0][][] */ 76,-115,-29,-25,19,3,61,23,-57,48,56,-92,45, 33,-127,-10,-20,-92,-19,-29,-34,-57,3,12,23,-1, -74,56,13,-53,-27,44,-14,-19,-125,-32,18,-73,-52, 
  /* [2][0][][] */ -90,-89,-42,-22,17,-42,59,72,-19,-8,21,-51,-7, -47,-112,-127,101,3,-48,27,59,-50,-35,38,-33,-9, -1,-19,27,28,-1,-63,55,36,27,-60,32,-23,42, 
  /* [3][0][][] */ -104,-119,127,-65,17,41,-12,87,2,-53,41,42,26, -62,-20,64,-66,75,-58,-37,77,-48,-25,87,4,-9, -32,-13,95,-13,33,35,-99,46,-68,-3,-21,11,9, 
  /* [4][0][][] */ -62,-127,84,-44,-5,60,-2,34,28,13,-43,10,-18, -89,-93,37,33,-24,72,20,14,38,12,-4,40,19, -76,-90,93,36,-2,-2,27,-28,12,43,3,31,14, 
  /* [5][0][][] */ 12,61,59,55,-2,66,68,36,-68,-84,-36,-38,-44, 75,-30,108,-34,-117,89,43,-83,-46,15,-44,-75,-13, -44,-29,79,63,-108,-57,38,8,-93,110,-88,127,-9, 
  /* [6][0][][] */ -116,-70,28,24,-89,-33,23,51,57,-13,65,26,-43, -113,49,-76,-13,17,-11,4,47,6,37,-39,4,67, -71,-106,-52,-39,127,82,31,73,-11,-20,-22,116,10, 
  /* [7][0][][] */ 45,-33,-51,53,-31,-25,70,-2,37,26,11,50,-26, -41,103,-84,4,25,27,36,-36,9,-61,45,26,-39, -59,117,68,2,5,127,67,9,41,41,-38,-21,-50, 
  /* [8][0][][] */ 114,40,71,-40,-40,-4,-6,-17,-17,37,-29,-16,50, 59,-76,57,-5,-3,-106,-39,-58,-4,97,-28,-54,17, -112,65,76,-54,-63,-26,-99,-75,48,127,-11,-65,8, 
  /* [9][0][][] */ 109,40,10,-31,56,6,-30,-17,127,-77,60,-63,-9, 105,74,-9,44,59,-6,32,-85,79,0,54,26,-19, 66,1,-3,45,71,-12,43,-73,56,29,57,26,-13, 
  /* [10][0][][] */ -57,-61,26,20,-27,40,65,-12,-4,54,-10,42,1, -92,-106,47,0,27,6,9,63,-10,43,-59,64,-14, -63,-127,32,58,-26,-24,81,56,-3,30,34,24,26, 
  /* [11][0][][] */ 23,67,-15,10,-39,36,-16,-27,2,24,-15,-12,12, 10,31,91,-2,-47,29,16,28,-41,61,-45,79,-6, -12,-31,71,-127,72,-12,12,-13,-1,28,-17,3,20, 
  /* [12][0][][] */ -17,127,-60,8,52,100,11,-44,-25,24,-2,-75,-21, -64,-96,-56,-24,-50,75,52,-13,-63,114,4,-67,1, 6,-41,-44,57,2,50,6,97,-88,39,-13,-34,4, 
  /* [13][0][][] */ 57,69,29,-19,-57,-34,23,-20,90,-15,-15,26,-14, -58,127,60,-54,16,-22,18,-1,57,-2,-7,51,-56, -83,-28,-36,-35,-90,-29,20,27,72,15,13,50,3, 
  /* [14][0][][] */ -46,-99,-38,29,46,16,-50,53,68,-39,-35,62,23, -26,3,-81,127,43,-15,4,24,85,6,-43,33,43, -62,98,-89,106,42,9,41,28,47,15,-19,36,9, 
  /* [15][0][][] */ -79,19,7,-4,29,-15,8,11,-11,0,-21,-6,12, -57,37,25,-22,12,-17,5,0,2,3,-5,-20,-2, 3,-127,-32,-8,19,-6,10,-24,31,-28,4,-21,15, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,1,3,13 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0034663928672671318, 0.0035632892977446318, 0.0042800577357411385, 0.0034212442114949226, 0.0053164265118539333, 0.0030340300872921944, 0.0039482987485826015, 0.004389813169836998, 0.0035393869038671255, 0.0033974610269069672, 0.0052289240993559361, 0.005742089357227087, 0.0036382507532835007, 0.0056933658197522163, 0.0048385350964963436, 0.0096997972577810287, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[16] = { -1265, -3286, -3248, -2873, -2354, -3621, -1568, -1553, -2529, -3501, 9, -3295, -2470, -1114, -2446, -692, };
const TfArray<1, int> tensor_dimension7 = { 1, { 16 } };
const TfArray<16, float> quant7_scale = { 16, { 0.00014159192505758256, 0.00014554985682480037, 0.00017482774273958057, 0.0001397477462887764, 0.00021716035553254187, 0.0001239311823155731, 0.00016127635899465531, 0.00017931092588696629, 0.00014457352517638355, 0.00013877626042813063, 0.00021358612866606563, 0.00023454742040485144, 0.00014861181261949241, 0.00023255721316672862, 0.00019763989257626235, 0.00039620811003260314, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*16] = { 
  /* [0][0][][] */ -21,0,12,3,-45,19,-11,22,26,10,-57,43,34,-54,53,21, -10,-16,20,8,-58,49,-50,6,-7,-5,-120,80,-6,-43,6,29, -17,-34,62,-14,-62,-36,-72,-60,-60,2,-127,41,15,-54,12,10, 
  /* [1][0][][] */ -16,70,15,-40,-27,-58,120,68,-77,-107,5,45,-15,-39,11,-15, 20,18,-16,7,-2,54,-109,-39,112,-124,-11,49,55,-55,-55,13, -47,-38,38,-70,-13,63,-100,-113,46,-127,44,-51,16,-45,44,-2, 
  /* [2][0][][] */ -81,20,-82,-23,17,34,-12,-125,17,-56,-26,-21,20,-40,-127,78, -16,-56,-88,-46,-40,-10,104,-49,50,-84,81,57,41,8,-77,-50, 74,-107,-17,21,-51,-96,8,11,-48,-116,81,2,-29,-9,-97,2, 
  /* [3][0][][] */ -15,19,5,-4,-44,52,25,86,-15,-19,-42,66,60,-14,96,87, 20,-20,23,-10,-123,-9,2,-81,-23,-21,-70,45,52,-75,7,127, -10,109,42,-37,-95,-22,1,9,-28,-23,-94,5,7,-45,56,19, 
  /* [4][0][][] */ 19,44,110,-29,-45,-70,-12,35,-65,-59,-51,-1,-49,-32,24,2, -8,-33,123,96,-101,87,-77,54,14,-27,-84,-14,-34,50,-85,-118, -59,-119,-104,37,-52,53,-127,-56,11,-30,-114,120,-42,-13,-99,68, 
  /* [5][0][][] */ 16,-57,-114,4,85,36,-62,6,-39,19,-34,59,11,-51,-33,-49, -40,-68,-20,-4,59,34,-87,0,-72,87,16,28,-39,-64,-16,-74, -79,-73,40,-64,70,-3,-6,-3,-42,127,-5,16,-28,-50,94,-58, 
  /* [6][0][][] */ 57,-13,-29,46,-15,-16,-74,-13,-6,27,-22,-75,4,41,-51,-127, -23,15,-67,-46,-1,-4,-44,8,-19,-1,-33,-53,-22,-19,-50,-126, 68,5,-44,-31,-12,-21,9,1,-78,42,-11,-25,3,36,-35,-107, 
  /* [7][0][][] */ -55,-19,52,-20,-49,1,65,61,69,-38,-87,19,74,72,76,-46, -34,-46,-113,-40,-39,41,-78,100,43,-28,-113,44,35,69,2,-1, -71,25,-7,-37,-29,-24,-64,-13,127,-17,-51,103,73,8,23,22, 
  /* [8][0][][] */ -66,-77,-24,-85,-78,-26,-89,67,-17,41,-62,66,51,14,4,-42, -33,-88,-26,-20,-48,-12,-61,8,-22,-42,-13,72,72,-79,-43,-62, -48,-96,-6,17,80,62,-93,-36,-85,101,3,7,-17,-127,-16,-51, 
  /* [9][0][][] */ -85,-80,23,1,36,-14,-30,6,-25,69,81,-127,15,-21,86,-90, -99,-70,64,-37,-10,-87,40,30,-83,31,20,91,48,-19,-1,-77, -51,-51,35,11,7,-52,32,-16,-68,-11,33,15,-34,2,-105,-45, 
  /* [10][0][][] */ -28,-31,43,-47,-19,-127,1,77,95,14,-20,52,34,47,98,-8, -70,-33,8,-53,-7,-24,49,-29,65,6,19,29,-58,57,-86,73, -10,-27,-35,-31,14,-18,-54,16,41,24,9,-21,29,-34,-39,51, 
  /* [11][0][][] */ -10,-87,-12,78,-7,-82,34,-58,-6,-30,38,-18,-100,-4,-38,78, 38,-55,-67,32,80,-94,57,-71,-34,0,-3,-27,-108,2,-61,52, -3,-91,-10,57,-12,-69,-42,-78,2,-127,-55,-65,-107,-58,-41,-7, 
  /* [12][0][][] */ -17,13,-19,0,-36,111,-17,-14,-39,-10,13,4,92,-41,20,92, -7,45,-41,-46,-46,-2,17,56,15,-17,-5,43,16,53,-50,44, -25,31,127,-78,-55,-5,-52,-8,40,-11,-18,-36,-23,-5,-59,119, 
  /* [13][0][][] */ -58,-4,-113,-18,-127,-24,-80,41,-102,-51,-85,-15,70,-5,-112,-57, -23,-84,-107,8,-69,8,-31,40,-27,-70,-35,-18,82,-59,13,-1, -43,-61,-22,-54,54,81,-74,2,-48,51,48,-36,43,-118,48,-3, 
  /* [14][0][][] */ -46,-3,71,-33,-88,-6,-94,-126,12,18,-127,91,21,-51,41,33, -45,18,20,-95,-66,-22,-40,-47,-48,-5,-53,18,-26,-67,54,24, -45,40,48,-95,-98,-127,-24,0,-40,17,-122,-7,-8,-101,79,38, 
  /* [15][0][][] */ 69,54,-43,-66,-118,-80,33,8,-14,-62,-90,-36,95,78,54,75, 34,16,8,-108,-101,-13,-62,22,14,-68,-59,-53,-3,-17,-1,-3, 3,46,-28,-69,-14,-14,34,70,43,-70,-8,-47,10,127,60,62, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0072804950177669525, 0.0037660859525203705, 0.0031217217911034822, 0.0040909876115620136, 0.0040306057780981064, 0.0038917663041502237, 0.0058821015991270542, 0.0033091744408011436, 0.0047690346837043762, 0.0037298235110938549, 0.0041840365156531334, 0.0039689247496426105, 0.0041517745703458786, 0.0034203019458800554, 0.0058427718468010426, 0.0040197861380875111, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -1048, -1891, -787, -1444, -1060, 853, 1574, -1079, -576, -735, -562, 158, -1510, -1415, -1446, -782, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.00024684597156010568, 0.00012768954911734909, 0.00010584231495158747, 0.00013870537804905325, 0.00013665812730323523, 0.0001319507573498413, 0.00019943328516092151, 0.00011219791485927999, 0.00016169463924597949, 0.0001264600723516196, 0.00014186020416673273, 0.00013456681335810572, 0.00014076636580284685, 0.00011596570402616635, 0.00019809980585705489, 0.00013629128807224333, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[3*208] = { 
  -35, -33, -36, 64, 31, -6, 16, 40, 1, -18, 52, -26, 13, 24, 25, 54, -58, 2, -27, 18, 7, -25, 8, 34, -13, -11, 14, -19, 17, 11, -51, 56, -36, 5, 24, 1, -32, -4, -20, 25, -33, -51, 31, 4, -26, -30, -59, 65, -34, 25, -1, 44, -25, -24, 36, 41, -63, -36, 11, -49, -7, -53, -30, 61, 3, 22, -9, 38, -1, -36, 18, 17, -62, -30, 42, -11, 10, -32, -85, 76, -27, 16, 32, 27, -6, -65, 19, 25, -46, -58, 27, 32, 59, -8, -34, 55, -46, 4, 30, 78, -29, -60, -4, 23, -68, -44, -36, 14, 67, -7, -43, 83, -52, -2, 9, 38, 39, -70, 5, 9, -127, -24, -15, -15, 32, -12, 0, 52, -81, 30, -25, 33, 20, -91, -39, 14, -83, -52, -3, 6, 69, -7, -68, 76, -70, 22, -33, 38, 75, -77, -42, 32, -56, -53, 19, 9, 52, -9, -56, 73, -26, 18, 14, 10, 3, -63, 3, 35, -54, -44, 41, 14, 48, -26, -20, 35, -26, 6, -48, 27, 27, -31, -1, 36, -40, -25, 21, -46, 47, -3, -19, 43, 10, 50, -9, -27, -13, -10, 36, 57, 27, -32, 16, -69, -5, -16, -55, 43, 
  59, -20, 6, -8, 74, 7, -1, -3, 3, 5, -61, -7, 12, 6, 16, -30, 37, 26, 4, 24, 18, 14, -40, -23, 25, 3, -13, -10, 30, -4, 64, -30, 68, 54, 12, 8, 44, 13, -64, 20, 17, -10, -10, -26, -15, 27, 57, 7, 50, -39, 2, 23, -13, 5, -59, 10, 1, 40, -6, -42, 42, -1, 76, -11, 60, 60, 3, 6, 72, 25, -60, 19, 14, -1, 16, -32, 13, -16, 38, -20, 74, -1, -26, 20, 19, 17, -47, 9, -3, 20, 7, -39, 34, -35, 58, -44, 42, -10, 8, 1, 49, 25, -43, 10, 19, 15, -23, -56, 17, -11, 39, -16, 39, -15, -41, 14, 57, 25, -16, 21, 6, 21, 9, -19, -10, -37, 49, -46, 53, -35, -11, 27, 6, 32, 4, -3, 36, -5, -3, -29, -5, -28, 19, -26, 21, -21, 8, -12, -51, 22, 48, -22, 23, -9, -33, -1, -10, -29, 0, -16, -5, 0, 4, 26, -77, 10, 16, -39, -6, 8, -38, 1, 26, -50, 26, -10, 34, -28, 3, -12, 31, 16, 4, -18, -65, 11, -12, -12, -10, -36, -32, 9, -19, -14, -50, -7, 76, -27, -12, -22, -81, -3, 2, 10, -22, -56, 18, 31, 
  -64, 26, 33, -56, -71, 5, -10, -24, 4, 4, -2, 20, -4, -13, -44, -45, -74, 36, 29, -60, 16, 1, 20, -18, -55, 29, -33, 42, -16, -5, -35, -1, -60, -22, 31, -24, -22, 23, 78, -36, -19, 26, -10, 36, -4, -33, -41, -18, -60, -14, -10, -58, -11, -7, 62, -48, 20, 3, -13, 24, -51, 1, -60, -20, -43, -24, 11, -52, -66, 37, 80, -28, -11, 14, -15, 26, -5, 6, -50, -2, -55, 16, 29, -82, 4, 3, 53, 11, 36, 11, 3, 51, -58, 66, -9, 0, -24, 47, 8, -48, -14, 25, 69, 10, 46, 29, 3, 79, -27, 38, -44, 5, -63, 45, 7, -50, -47, 34, 29, 4, 8, 26, -12, 57, 1, 61, -29, -16, -5, 9, 18, -56, -10, 36, -15, 32, 31, 35, 60, 13, -4, 1, -11, -11, -15, 11, -7, 4, 15, 14, 1, 33, 59, 53, 19, 44, -34, 40, 14, 3, -9, 17, 24, -53, 11, 23, 20, -5, 73, 24, 28, 12, 3, 64, 61, -25, -12, -29, 9, -25, -39, 18, -38, -27, 79, 24, -17, 29, -11, 19, 30, -42, 30, -15, 28, -4, -108, 20, 16, 10, 36, 13, 4, 40, 16, 48, 36, -64, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 3,208 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0056010331027209759, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[3] = { -209, -654, 969, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00014715838187839836, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0408470518887043, } };
const TfArray<1, int> quant12_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.033905107527971268, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant14_scale = { 1, { 0.033905107527971268, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant15_scale = { 1, { 0.033905107527971268, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant16_scale = { 1, { 0.033905107527971268, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.026273434981703758, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.026273434981703758, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.026273434981703758, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.026273434981703758, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.113492451608181, } };
const TfArray<1, int> quant21_zero = { 1, { -36 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension13, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
